


create table `pm_recepients`
(
`pm_id` INT(5) unsigned NOT NULL,
`pm_sent_to_uid` MEDIUMINT(5) unsigned NOT NULL, 
`pm_labels` varchar(60) NOT NULL default -1,
`pm_is_read` TINYINT(3) NOT NULL ,
`pm_is_new` TINYINT(3) NOT NULL , 
`pm_is_deleted` TINYINT(3) NOT NULL
)

create index pm_id_idx on pm_recepients (pm_id) using BTREE

create index pm_sent_to_uid_idx on pm_recepients (pm_sent_to_uid) using BTREE

create table `pm`
(
`pm_id` int(10) unsigned not null primary key auto_increment,
`pm_id_head` int(10) unsigned not null,
`pm_from_uid` int(5) unsigned not null,
`pm_deleted_by_sender` tinyint(3) unsigned not null, 
`pm_from_name` varchar(255), 
`pm_sent_time` int(10) unsigned, 
`pm_subject` varchar(100),
`pm_body` text
)


create table `wall_post` 
(
`id` int(10) PRIMARY KEY NOT NULL auto_increment ,
`on_uid` int(10) unsigned ,
`by_uid` int(10) unsigned , 
`content` text  , 
`date` int(10) unsigned not null default 0
)

ALTER TABLE `wall_post` ADD INDEX idx_on_uid (`on_uid`)


create table `wall_post_reply` 
(
`wpr_id` int(10) unsigned auto_increment primary  key,
`wpr_content` text,
`wpr_by_uid` int(10) unsigned, 
`wpr_date` int(10) unsigned,
`wall_post_id` int(10) unsigned
)

create table `forgot_password`
(
`id` int(5) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
`uid` int(5) unsigned NOT NULL COMMENT "#Users id uid, this will come from the url that has been sent in the mail#",
`password` varchar(100) NOT NULL COMMENT "#This password will be confirmed and inserted into the users password after confirmation#",
`code` varchar(64) NOT NULL COMMENT "#The code that will be checked against the password, this code will be coming from the url along with the user email id(email), and users id(uid)#", 
`datetime` int(5) unsigned DEFAULT '0' COMMENT "#The time this entry got inserted, a limit of 6hrs etc can be set for the users to check thier mail and confirm the password with the help of this field#"
#CONSTRAINT fk_fp_uid FOREIGN KEY (`uid`) REFERENCES `users`(`uid`) ON DELETE CASCADE
)


// alter table <tablename> change `olColumnName` `newColumnName` columnDefinition
alter table `wall_post_reply` change `wall_post_id` `wp_id` int(10) unsigned


// alter table After
alter table `forgot_password` 
add column `email` varchar(64) NOT NULL 
after `uid`

/*

for the moment, will delete this in 5 mins
user a8u ka md5 with salt=abc
2f82ddd8a34b632f53e2bc266eded98e
b018f1d60cd9888b70b9bfd86e17d2be

*/


Change Column Name:::
alter table `wall_post` change `date` `wp_date` int(10) unsigned not null 


alter table `wall_post` modify `wp_on_uid` int(11) unsigned not null 

alter table `wall_post` add index `idx_wp_by_uid` (`wp_by_uid` )


alter tables add MULTIPLE Columns:::
alter table `users` 
add column (
`about` longtext, 
`dob` timestamp,
`sex` char(1), 
`displaypic_url` varchar(255),
`website_url` varchar(255), 
`perfume` varchar(255)
)



alter tables add DROP Columns:::
alter table `users` 
drop column `about`,
drop column `dob`, 
drop column  `sex`, 
drop column  `displaypic_url` ,
drop column `website_url`  , 
drop column `perfume`


executed alter table to change many columns:::
alter table `wall_post` change  `id` `wp_id` int(10) NOT NULL AUTO_INCREMENT,
alter table `wall_post` change  `on_uid` `wp_on_uid` int(10) unsigned DEFAULT NULL,
alter table `wall_post` change  `by_uid` `wp_by_uid` int(10) unsigned DEFAULT NULL,
alter table `wall_post` change  `post` `wp_post` text,
alter table `wall_post` change  `date` `wp_date` int(10) unsigned NOT NULL DEFAULT '0',




Alter table modify column:::

ALTER TABLE <table> COMMENT = 'blah blah blah';
ALTER TABLE <table> MODIFY COLUMN <column> <col params> COMMENT = 'blah blah blah';
e.g.

ALTER TABLE `sales` MODIFY COLUMN ID INT NOT NULL COMMENT = 'blah blah blah';

Alter table MODIFY Column & ADD COMMENT:::
alter table `wall_post` modify column `wpr_id` text COMMENT '#wall_post_reply table ids associated with this wall_post id#'


Alter table ADD Column & ADD COMMENT:::
alter table `wall_post` add column `wpr_id` text COMMENT '#wall_post_reply table ids associated with this wall_post id#'


Altered table users added column:
alter table `users` modify column  `is_banned` tinyint(1) unsigned;


created some AI tables:::

create table ai_logs
(
`ai_id` bigint unsigned auto_increment not null primary key,
`users_uid` bigint not null,
`reason` varchar(255) COMMENT 'whether cause happened or action was taken etc for the effect to happen',
`type` varchar(255) COMMENT 'which type of reason happened, like spam_words was the type of reason cause',
`any_definition` text COMMENT 'any definition abt the cause or action taken, etc, like cause spam_words happened at this time etc, the why?',
`datetime` int(5) DEFAULT 0
`ai_u_l_id` int(5) COMMENT 'corresponding id of the ai_user_logs,, foreign key for the column'
)

alter table `ai_logs` add column `aiul_ai_u_l_id` int(5) COMMENT '#corresponding id (ai_u_l_id) of the ai_user_logs table, foreign key for that column#'


create table ai_keyword_definitions
(
`ai_keydef_id` int(5) auto_increment primary key,
`keyword` varchar(255) COMMENT '#keywords that have some defintions#',
`definition` text COMMENT '#the definition of the keyword#'
)


create table ai_user_logs
(
`ai_u_l_id` int(5) auto_increment primary key not null, 
`users_uid` int(5), 
`event` text COMMENT '#what event happened, like, what did the user do at this time, what happened?#', 
`time` int(5) DEFAULT 0
)

create table ai_causes
(
`ai_cause_id` int(5) auto_increment primary key, 
`cause_name` varchar(255), 
`c_severity_level` int(4),
`ai_action_actname` varchar(255) COMMENT '#Corresponds to the action_name column in the ai_actions table#'
)

create table ai_causes
(
`ai_cause_id` int(5) auto_increment primary key, 
`cause_name` varchar(255), 
`c_severity_level` int(4),
`ai_e_effect_name` varchar(255) COMMENT '#Corresponds to the effect name column of the ai_effects table#'
)

create table ai_effects
(
`ai_effect_id` int(5) auto_increment primary key,  
`effect_name` varchar(255) COMMENT '#Name of the final effect that is the resultant#',
`ai_action_actname` varchar(255) COMMENT '#Corresponds to the action_name column in the ai_actions table#'
)

create table ai_actions
(
`ai_actions_id` int(5) auto_increment primary key, 
`action_name` varchar(255) COMMENT '#Action function to run#', 
`a_severity_level` int(4),
/*`warning_name` varchar(255) COMMENT '#warning function to run#'*/
`unit_of_time` varchar(255) COMMENT '#Unit of time to keep the action alive#'
)


#added date 11-may
alter table `users` add column `displayPicId` INT COMMENT '#Display Pic id of the user thats present in the pics folder#';

#added date 11-may
alter table  `users` add column `regTime` int(10) unsigned COMMENT '#The time at which user registered#'

#added date 11-5
create table `mysql_error_logs` 
(
`id` int(4) unsigned auto_increment primary key,
`mysql_errno` varchar(255),
`mysql_error` text,
`query` text
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='#Logging Mysql errors#' ;


===

:::GROUPS Tables:::

groups table:

id (gid),
group_name,
grp_info,
grp_url,
is_active,
is_deleted
grp_create_date


group_members table:

id
gid, (Foreign key of groups table id )
g_members,

group_media (fotos, videos) table:

id,
gid (Foreign key of groups table id )
foto_url,
video_url


group_wall_post table:


group_wall_post_rep table:



::: WEIGHTED Average Table :::
id	mutual_friend		profile_visits			wall_posts		like			share			album_visits			weight_amount
1				1									5									5					10				20					40									1

(For, 1 unit of weight_amount, u need, 1 mutual friend, or 
5 wall_post made on his/her wall/profile(or album, with nice words for eg. ur hot, nice, good looking etc, *later with sentiment analysis) etc
you have to Like atleast 10 post of that friend, or Share 20 posts/stories of that friend 
or 30 album visits )

then,
u can take multiple parameters as well,

if 5 profile_visits made, and also has 1 mutual_friend then even higher rank.

===

#added date 12-june-2013
ALTER table `wall_post` add column `deleted` tinyint default 0;



========================

:::test2:::

CREATE TABLE `test2` (
`id` int(8) auto_increment,
 `about` longtext,
 `dob` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 `sex` char(1) DEFAULT NULL,
 `displaypic_url` varchar(255) DEFAULT NULL,
 `website_url` varchar(255) DEFAULT NULL,
 `perfume` varchar(200) DEFAULT NULL,
primary Key (`id`)

) ENGINE=InnoDB DEFAULT CHARSET=latin1


:::LIKE:::


#added date 16-june-2013
create table `like` 
(
`id` int(4) auto_increment ,
`uid` int(10) default null COMMENT '#user id who likes the other objects like, wall_post(wp_id), wall_post_reply(wpr_id), photos(photos_id) etc#',
`wp_id` int(8) default null,
`wpr_id` int(8) default null COMMENT '#wall_post_reply id that has been liked by user#',
`photos_id` int(8) default null,
primary key(`id`)
);

^ the above table was dropped on 23-june-2013,
and below one was created

#added date 23-june-2013
create table `like` 
(
`id` int(4) auto_increment ,
`users_id` int(10) default null COMMENT '#user id who likes the other objects like, wall_post(wp_id), wall_post_reply(wpr_id), photos(photos_id) etc#',
`wp_id` int(8) default null COMMENT '#wall_post id that has been liked by user#',
`wpr_id` int(8) default null COMMENT '#wall_post_reply id that has been liked by user#',
`photos_id` int(8) default null COMMENT '#the id of the photos that have been liked by user#',
PRIMARY KEY (`id`),
INDEX (`users_id` , `wp_id`, `wpr_id`, `photos_id` )
);

/*
Could not create Important FOREIGN KEY constraints on the `like` table 
for the below columns, as The parent table for users, wall_post etc 
are all MyISAM & it does not allow Foeign keys right now,
as we can not create foreign keys on InnoDB tables REFRENCING MyISAM,
The REFERENCING Parent Table should also be InnoDB
So right now, just making do, with INDEX, 
the INDEX() command in the above query of `like` table

CONSTRAINT fk_users_id FOREIGN KEY(`users_id`) references `users`(`uid`) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_wp_id FOREIGN KEY(`wp_id`) references `wall_post`(`wp_id`) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_wpr_id FOREIGN KEY(`wpr_id`) references `wall_post_reply`(`wpr_id`) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_photos_id FOREIGN KEY(`photos_id`) references `photos`(`id`) ON DELETE CASCADE ON UPDATE CASCADE

*/


create table `like` 
(
`id` int(4) auto_increment ,
`post_id` int(8) default null COMMENT '#post id that has been liked by the user#',
`like_status` COMMENT '#0-NotLiked(like bit is off :P), 1-Like(like is on)#'
`users_id` int(10) default null COMMENT '#user id who likes the other objects like, wall_post(wp_id), wall_post_reply(wpr_id), photos(photos_id) etc#',
PRIMARY KEY (`id`),
INDEX (`post_id`, `users_id`, `photos_id` )
);


#added date 23-june-2013
create table `wp_wpr`
(
`id` int(8) auto_increment,
`wp_id` int(8) COMMENT '#This wp_id has which wpr_id associated#',
`wpr_id` int(8) COMMENT '#This wpr_id has which wp_id associated with it#',
`log_entry` int(10) COMMENT '#Entry number in the log_entry table, usually the timestamp at which this entry happened#',
INDEX(`wp_id`, `wpr_id`),
PRIMARY KEY(`id`)
) ENGINE=InnoDB COMMENT '#Table stores wall_post id and wall_post_reply id relation#'



#added date 23-june-2013
// Alter TABLE Tablename AFTER Column
Alter table `wp_wpr` add column 
`status` int(4) COMMENT '#says the status of the comment, whether, 0-Unmoderated, 1-Approved, 2-Activated, 3-Deleted#' 
AFTER `wpr_id`

^ Above column was then Dropped



#added date 23-june-2013
Alter table `wall_post_reply` add column 
`status` int(4) COMMENT '#says the status of the comment, whether, 
0-Deleted, 1-Activated, 2-Approved, 3-Unmoderated#' ;



:::TEST table:::

#added date 24-june-2013
# This table can become the actual wall_post and wall_post_reply table
CREATE TABLE `TEST_WALL_POST` (
`id` int(10) NOT NULL AUTO_INCREMENT,
`on_uid` int(10) unsigned DEFAULT NULL,
`by_uid` int(10) unsigned DEFAULT NULL,
`post` text,
`date` int(10) unsigned NOT NULL DEFAULT '0',
`post_id` text COMMENT '#Post  associated with this Replies id, (wall_post_reply table ids associated with this wall_post table id)#',
`type` tinyint(2) DEFAULT NULL COMMENT '#Either a wall_post (1-post) or a wall_post_reply(2-reply), Denoted as, 1-post, 2-reply#',
`status` tinyint(2) DEFAULT NULL COMMENT '#Says the status of the comment, whether, 0-Deleted, 1-Activated, 2-Approved, 3-Unmoderated#',
PRIMARY KEY (`id`),
KEY `idx_on_uid` (`on_uid`),
KEY `idx_by_uid` (`by_uid`),
KEY `idx_type` (`type`),
KEY `idx_status` (`status`)
) ENGINE=MyISAM AUTO_INCREMENT=0 DEFAULT CHARSET=latin1


#added date 25-june-2013
# Inserting all wall_post entries into Test_Wall_Post
INSERT INTO `TEST_WALL_POST`
( `on_uid`, `by_uid`, `post`, `date`, `type`, `status` )
SELECT `wp_on_uid`, `wp_by_uid`,
`wp_post` , `wp_date`, 1, `deleted`
FROM `wall_post` ;

# Inserting all wall_post_replies entries into Test_Wall_Post
INSERT INTO `TEST_WALL_POST`
( `on_uid`, `by_uid`, `post`, `date`, `post_id`, `type`, `status` )
SELECT null, `wpr_by_uid`,
`wpr_content`, `wpr_date`, `wp_id`, 2, 1
FROM `wall_post_reply` ;

# renaming 
rename table `TEST_WALL_POST` to `wall_posts_wall_post_replies`

# adding column and index
alter table `like` add column `wpwpr_id` int(8) after `wpr_id` ,
add INDEX (`wpwpr_id`);

# modifying the column that was just made above
alter table  `like` modify column `wpwpr_id` int(8) COMMENT '#wall_posts_wall_post_replies id liked by the user#'


#added date 28-june-2013
# added status column to like table, whether status is active or not active
alter table `like` add column 
(
`status` INT(2) COMMENT '#Whether the like is Active or Not Active, 0-UnActive or 1-Active#'
)

# ^ Removed the above column
ALTER TABLE  `like` DROP  `status` ;



#Added 26 Sept 2013
CREATE TABLE `qna_post` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `title` varchar(512),
    `content` longtext NOT NULL,
    `slug` varchar(128) NOT NULL,
    `parent_id` integer COMMENT "#Rows having parent id are by default answers, rows not hving parent_id are Questions#",
    `date` datetime NOT NULL,
    `user_id` integer NOT NULL,
    `user_ip` char(39) NOT NULL,
    `status` integer COMMENT "#we dont want a boolean field here, since, we may add 2,3,4 and other number depicting some other state. Values 0-Deactivated, 1-Active, null means untouched#"
);

# References self
ALTER TABLE `qna_post` ADD CONSTRAINT `parent_id_refs_id` FOREIGN KEY (`parent_id`) REFERENCES `qna_post` (`id`);


#Added 27 Sept 2013
CREATE TABLE  `qna_vote` (
 `id` INTEGER AUTO_INCREMENT NOT NULL PRIMARY KEY ,
 `post_id` INTEGER NOT NULL COMMENT  "#Foreign key referencing qna_post.id#",
 `by_user` INTEGER NOT NULL COMMENT  "#Foreign key referencing users.id#",
 `vote` INTEGER NOT NULL COMMENT  "#1 or -1, positive or negative vote#",
 `date` DATETIME NOT NULL ,
 `status` INTEGER COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)

ALTER TABLE `qna_vote` ADD CONSTRAINT `post_id_refs_id` FOREIGN KEY (`post_id`) REFERENCES `qna_post` (`id`);



# Added 17 Nov 2013
DROP TABLE IF EXISTS `imagegallery_albums`;

CREATE TABLE `imagegallery_albums` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT,
`user_id` INT(8)  COMMENT "# User who created the album #",
`name` VARCHAR(255) COMMENT "#Name of the Album#",
`description` LONGTEXT COMMENT "# Description about the Album,  eg. What it is all about, etc. #",
`place` VARCHAR(255) COMMENT "# Where it was taken etc #",
`date` datetime COMMENT "# Date of Creation of the Album #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
#FOREIGN KEY(`id`) REFERENCES users(`id`)
)


# Added 17 Nov 2013
DROP TABLE IF EXISTS `imagegallery_photos`;

CREATE TABLE `imagegallery_photos` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT,
`user_id` INT(8)  COMMENT "# User who uploaded the photo #",
`album_id` INT(8) COMMENT "# Album Id, The Album in which the Photo resides #",
`title` VARCHAR(255) COMMENT "#Title for the Photo#",
`description` LONGTEXT COMMENT "# Description for the Photo,  eg. What it is all about, etc. #",
`place` VARCHAR(255) COMMENT "# Where it was taken etc #",
`actual_name` VARCHAR(255) COMMENT "# Actual Name of the photo, without the extension#",
`actual_file_name` VARCHAR(255) COMMENT "# Actual Full File Name of the photo#",
`photo_save_path` VARCHAR(255) COMMENT "# Path where photot is saved, and whats its new name #",
`date` datetime COMMENT "# Date of Creation of the Photo #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)


# Added 17 Nov 2013
CREATE TABLE `imagegallery_photo_comments` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT,
`user_id` INT(8)  COMMENT "# User who gave the comment on the photo #",
`photo_id` INT(8) COMMENT "# Photo which the comment relates to #",
`comment` LONGTEXT COMMENT "# Comment on the Photo #",
`date` datetime COMMENT "# Date of Creation of the Photo #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)


# Added 23 Nov 2013
ALTER TABLE `like` ADD COLUMN `module_table_name` VARCHAR(64);
ALTER TABLE `like` ADD COLUMN `module_table_id` INT(8) AFTER `photos_id`;


# Added 23 Nov 2013
/*
id, 
question, 
user_id, 
module_table_id( post_id, either from imagegallery table-imageid, or post table postid etc.), 
module_table_name (module_type, table_name/ or post_type: image_post, wall_post etc.), 
date, 
status
*/
CREATE TABLE `poll` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT,
`question` VARCHAR(1024) DEFAULT NULL COMMENT "#Question of the Poll#", 
`user_id` INT(8)  COMMENT "# User who gave the comment on the photo #",
`module_table_id` INT(8) COMMENT "# Related to the table id of the module ( Like if its from imagegallery then, module_table_id: id of imagegallery table, or post table id etc.)#", 
`module_table_name` VARCHAR(64) COMMENT "#(module_type, table_name/ or post_type: Like module_table_name: 'imagegallery', image_post, wall_post etc.)#", 
`date` datetime COMMENT "# Date of Creation of the Photo #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)


DROP TABLE IF EXISTS `poll_options`

CREATE TABLE `poll_options` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT, 
`poll_id` INT(8) COMMENT "#Foreign Key References poll(`id`)#", 
`option_key` TINYINT(1) UNSIGNED COMMENT "#( Integers, 1,2,3... so on. Most of the times being between 1-5)#", 
`option_text` VARCHAR(512) DEFAULT NULL COMMENT "#Text of the option#",
`date` datetime COMMENT "# Date of Creation of the Photo #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)

CREATE TABLE `poll_votes` (
`id` INT(8) PRIMARY KEY AUTO_INCREMENT, 
`poll_options_id` INT(8) COMMENT "#Foreign Key References poll_options(`id`) Field#", 
`poll_options_other_text` VARCHAR(512) COMMENT "#(if in the optins, Other is selected, then a text box will come up, saying If Other, then what? 'other then what?', VARCHAR Field)#",
`vote` TINYINT(1) COMMENT "# 0, -1 or (+1) , Indicating: 0: Null, Vote: +1, Vote_undo: -1#", 
`user_id` INT(5) COMMENT "#References Users table (`id`)#", 
`date` datetime COMMENT "# Date of Creation of the Photo #",
`status` INT(4) COMMENT  "#values 0-Deactivated, 1-Active, null-probably untouched yet#"
)


# Added 2 Dec 2013
CREATE TABLE `imagegallery_like` (
 `id` int(4) NOT NULL AUTO_INCREMENT,
 `users_id` int(10) DEFAULT NULL COMMENT '#user id who likes the other objects like, wall_post(wp_id), wall_post_reply(wpr_id), photos(photos_id) etc#',
 `i_p_id` int(8) DEFAULT NULL COMMENT '# imagegallery_photos id that have been liked by user#',
  `i_p_c_id` int(8) DEFAULT NULL COMMENT '# imagegallery_photo_comments id liked by the user#', 
 `module_table_id` int(8) DEFAULT NULL,
 `module_table_name` varchar(64) DEFAULT NULL,
 PRIMARY KEY (`id`),
 KEY `users_id` (`users_id`),
 KEY `i_p_id` (`i_p_id`),
 KEY `i_p_c_id` (`i_p_c_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1


# Added 17 Dec 2013
CREATE TABLE `imagegallery_photo_ratings` (
 `id` int(8) NOT NULL AUTO_INCREMENT,
 `user_id` int(8) DEFAULT NULL COMMENT '# User who gave the comment on the photo #',
 `photo_id` int(8) DEFAULT NULL COMMENT '# Photo which the comment relates to #',
 `rating` int(8) COMMENT '# Rating given to the Photo #',
 `date` datetime DEFAULT NULL COMMENT '# Date of Creation of the Photo #',
 `status` int(4) DEFAULT NULL COMMENT '#values 0-Deactivated, 1-Active, null-probably untouched yet#',
 PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1


# Added 11 Jan 2014
ALTER TABLE `users` ADD COLUMN `is_online` TINYINT COMMENT "#1-Online , 0-Offline#"
ALTER TABLE `users` ADD COLUMN `signature` text DEFAULT null


# Added 13 Jan 2014
ALTER TABLE `users` ADD COLUMN `last_login` DATE NOT NULL DEFAULT '0001-01-01';
ALTER TABLE `users` MODIFY COLUMN `last_login` INT(10) DEFAULT NULL;

ALTER TABLE `users` ADD COLUMN `last_login` INT(10) DEFAULT NULL; ( default value actually is supposed to be, NOW() )


# 15 Feb 2014
alter table `users`  add column `last_activity` int(10) DEFAULT NULL;




